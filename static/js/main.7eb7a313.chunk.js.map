{"version":3,"sources":["components/Button/Option.js","components/Button/Results/Preview.js","components/Button/Results/Value.js","components/Button/Results/index.js","routes.js","views/Options.js","views/Results.js","App.js","serviceWorker.js","index.js"],"names":["Picker","props","onChange","input","color","ButtonOption","form","useSelector","state","get","htmlFor","Field","name","component","type","reduxForm","Preview","background","Button","styled","button","renderVlaue","value","console","log","ButtonResult","useState","code","setCode","useEffect","values","renderValue","language","style","atomDark","startingLineNumber","routes","path","exact","options","main","Option","Options","map","route","index","key","to","Results","App","className","Boolean","window","location","hostname","match","rootReducer","combineReducers","formReducer","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7eb7a313.chunk.js","sourcesContent":["import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { Field, reduxForm } from \"redux-form\";\nimport { get } from \"lodash\";\nimport { CompactPicker } from \"react-color\";\n\nconst Picker = props => {\n  const {\n    input: { onChange }\n  } = props;\n\n  return <CompactPicker onChange={color => onChange(color)} />;\n};\n\nlet ButtonOption = () => {\n  const form = useSelector(state => state.form);\n  const color = get(form, \"button.values.color\", false);\n\n  return (\n    <>\n      {/* <div>\n        <label htmlFor=\"size\">Size</label>\n        <Field name=\"size\" component=\"input\" type=\"checkbox\" />\n      </div> */}\n      <div>\n        <label htmlFor=\"color\">Color</label>\n        <Field name=\"color\" component=\"input\" type=\"checkbox\" />\n        {color && <Field name=\"background\" component={Picker} />}\n        {color && <Field name=\"color\" component={Picker} />}\n      </div>\n    </>\n  );\n};\n\nButtonOption = reduxForm({\n  // a unique name for the form\n  form: \"button\"\n})(ButtonOption);\n\nexport default ButtonOption;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport styled from 'styled-components';\nimport { get } from \"lodash\";\n\nconst Preview = () => {\n  const form = useSelector(state => state.form);\n  const background = get(form, \"button.values.background.hex\", \"white\");\n  const color = get(form, \"button.values.color.hex\", \"black\");\n\n  const Button = styled.button`\n    background: ${props => props.background};\n    color: ${props => props.color};\n    font-size: 1.5em;\n    margin: 1em;\n    padding: 0.25em 1em;\n    border: 2px solid black;\n    border-radius: 3px;\n  `;\n\n  return (\n    <div>\n      <Button background={background} color={color}>Button</Button>\n    </div>\n  );\n};\n\nexport default Preview;\n","const renderVlaue = (value) => {\n  console.log(value, 'ini value');\n  return `\n  import React from \"react\";\n  import { useSelector } from \"react-redux\";\n  import styled from 'styled-components';\n  import { get } from \"lodash\";\n\n  const Button = () => {\n    const form = useSelector(state => state.form);\n    const background = get(form, \"button.values.background.hex\", \"white\");\n    const color = get(form, \"button.values.color.hex\", \"black\");\n\n    const Button = styled.button\\`\n      background: ${props => props.background};\n      color: ${props => props.color};\n      font-size: 1.5em;\n      margin: 1em;\n      padding: 0.25em 1em;\n      border: 2px solid black;\n      border-radius: 3px;\n    \\`;\n\n    return (\n      <div>\n        <Button background={background} color={color}>Button</Button>\n      </div>\n    );\n  };\n\n  export default Button;\n  `\n}\n\nexport default renderVlaue;","import React, { useState, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { Prism as SyntaxHighlighter } from \"react-syntax-highlighter\";\nimport { atomDark } from \"react-syntax-highlighter/dist/esm/styles/prism\";\nimport { get } from \"lodash\";\nimport Preview from \"./Preview\";\nimport renderValue from './Value';\n\nconst ButtonResult = props => {\n  const [code, setCode] = useState();\n  const form = useSelector(state => state.form);\n\n  useEffect(() => {\n    const values = renderValue(form);\n\n    setCode(values);\n  }, [form]);\n\n  return (\n    <div>\n      <SyntaxHighlighter\n        language=\"javascript\"\n        style={atomDark}\n        startingLineNumber\n      >\n        {code}\n      </SyntaxHighlighter>\n      <Preview />\n    </div>\n  );\n};\n\nexport default ButtonResult;\n","import React from \"react\";\nimport { OptionButton, ResultButton } from \"./components/Button\";\n\nconst routes = [\n  {\n    path: \"/\",\n    exact: true,\n    name: \"Home\",\n    options: () => <div>home!</div>,\n    main: () => <h2>Home</h2>\n  },\n  {\n    path: \"/button\",\n    name: \"Button\",\n    options: () => <OptionButton />,\n    main: () => <ResultButton />\n  },\n];\n\nexport default routes;\n","import React from \"react\";\nimport { Route } from \"react-router-dom\";\nimport { Link } from \"react-router-dom\";\nimport routes from \"../routes\";\n\nconst Options = () => {\n  return (\n    <div>\n      {routes.map((route, index) => (\n        <div key={index}>\n          <Link to={route.path}>{route.name}</Link>\n          <Route\n            path={route.path}\n            exact={route.exact}\n            component={route.options}\n          />\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default Options;\n","import React from \"react\";\nimport { Route } from \"react-router-dom\";\nimport routes from \"../routes\";\n\nconst Results = () => {\n  return (\n    <div>\n      {routes.map((route, index) => (\n        <Route\n          key={index}\n          path={route.path}\n          exact={route.exact}\n          component={route.main}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default Results;\n","import React from \"react\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport Options from \"./views/Options\";\nimport Results from \"./views/Results\";\nimport { Route } from \"react-router-dom\";\nimport routes from \"./routes\";\nimport \"./app.scss\";\n\nconst App = () => {\n  const renderRouteName = () => {\n    return routes.map((route, index) => {\n      return (\n        <Route\n          key={index}\n          path={route.path}\n          exact={route.exact}\n          component={() => route.name}\n        />\n      );\n    });\n  };\n\n  return (\n    <Router>\n      <div className=\"container\">\n        <div className=\"flex-grid\">\n          <aside className=\"col sidebar\">\n            <h2>Components</h2>\n            <Options />\n          </aside>\n          <section className=\"col main\">\n            <h2>{renderRouteName()}</h2>\n            <Results />\n          </section>\n        </div>\n      </div>\n    </Router>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore, combineReducers } from \"redux\";\nimport { reducer as formReducer } from \"redux-form\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst rootReducer = combineReducers({\n  form: formReducer\n});\n\nconst store = createStore(\n  rootReducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}